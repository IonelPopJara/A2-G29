Group Work Assignment 2 - A2-Group 29
=====================================

Task 8 (Design) - Change Requests

Initially, we used an `Enum`, namely `EffectiveAttack.java`, which included pairs of types,
that would have an 'effective attack', hence multiplied by the factor of two in the following
format: `attack: type` => `defender: type` such that the attacker produces an `effective attack`
on the defender. Then, in the `attack` method found under `Pokemon.java`, we would observe
the types of Pokemons, namely the type of the attacker and the defender. If such a relation
is found under the `EffectiveAttack.java` `Enum`, we would regard this attack as 'effective',
otherwise, we observe an `ineffective attack`.

Indeed, we would also need to consider the case of the 'normal attack'. The above mentioned 
procedure would only be carried if none of the specifications of the 'normal attack' are
met (specified per the instructions of the assignment).

However, this approach isn't applicable for the new requirements introduced in task 8, 
since we previously only considered pairwise relations, whereas now, we need to consider 
cases, where, e.g., a Pokemon of some type is effective against several Pokemon types, 
similarly for the ineffective behavior. Therefore, we need to consider a more general approach, 
which would allow us to specify such relations.

With that in mind, the relations given by the table are easily represented with a two-dimensional
array, i.e, a matrix of two dimensions. The first dimension (the rows) represent the types of the
attacker, while the second dimension (the columns) represent the types of the defender. 
We call the matrix `DAMAGE_MULTIPLIER_MATRIX` found under the `PokemonUtils` class. Moreover,
we created an `Enum` - `PokemonTypes.java` - that assigns each Pokemon type an index that
corresponds to the row/column of the `DAMAGE_MULTIPLIER_MATRIX` per the specified order in the 
assignment instructions. For instance, [0] - BUG, [1] - DRAGON, and so forth. We may assume that 
the index of the row and column is the same for each type, since the matrix has the same order
of the types in the rows and columns.

The method `getEffectiveValue` found under the `PokemonUtils` class, returns the value of the matrix
at the given indices, i.e., the value of the matrix at the row corresponding to the type of the
attacker and the column corresponding to the type of the defender, therefore returning the
factor of the attack relation. Lastly, we apply this factor to the damage dealt by the attacker.
